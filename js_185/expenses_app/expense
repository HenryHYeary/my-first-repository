#!/usr/bin/env node

const { Client } = require('pg');
const READLINE = require('readline');
const fs = require('fs');

const PROCESS = require('process');
const help = `An expense recording system
  
Commands:
  
add AMOUNT MEMO [DATE] - record a new expense
clear - delete all expenses
list - list all expenses
delete NUMBER - remove expense with id NUMBER
search QUERY - list expenses with a matching memo field`;

function logAndExit(err) {
  console.log(err);
  process.exit(1);
}

class ExpenseData {
  constructor() {
    this.client = new Client({ 
      host: "/var/run/postgresql",
      port: 5432,
      user: "henmo",
      database: "expenses" 
    });
  };

  async createTableIfNone() {
    let text1 = `SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses'`;
    let text2 = fs.readFileSync('schema.sql').toString();

    let res = await this.client.query(text1).catch(error => logAndExit(error));

    if (res.rows[0].count === '0') {
      await this.client.query(text2).catch(error => logAndExit(error));
    }
  }

  displayCount(rowCount) {
    if (rowCount === 0) {
      console.log(`There are no expenses.`);
    } else if (rowCount === 1) {
      console.log(`There is 1 expense.`);
    } else {
      console.log(`There are ${rowCount} expenses.`);
    }
  };

  displayExpenses(expenses) {
    expenses.forEach(row => {
      let columns = [
        String(row.id).padStart(3),
        row.created_on.toDateString().padStart(10),
        row.amount.padStart(12),
        row.memo
      ];

      let totalString = columns.join(' | ');
      console.log(totalString);
    });
  };

  calcualteTotal(expenses) {
    let total = 0;

    expenses.forEach(row => {
      total += Number(row.amount);
    });

    return total;
  };

  displayTotal(expenses) {
    if (expenses.length !== 0) {
      let lastRow = expenses[expenses.length - 1];
      let columns = [
        String(lastRow.id).padStart(3),
        lastRow.created_on.toDateString().padStart(10),
        lastRow.amount.padStart(12),
        lastRow.memo
      ];

      let totalString = columns.join(' | ');
      console.log(`${'-'.repeat(totalString.length)}`);
      console.log(`Total${this.calcualteTotal(expenses).toFixed(2).padStart(31)}`);
    }
  };

  async listExpenses() {
    await this.client.connect().catch(error => logAndExit(error));
    await this.createTableIfNone().catch(error => logAndExit(error));
    let text = `SELECT * FROM expenses ORDER BY created_on`

    let res = await this.client.query(text).catch(error => logAndExit(error));

    this.displayCount(res.rowCount);
    this.displayExpenses(res.rows);
    this.displayTotal(res.rows);

    await this.client.end().catch(error => logAndExit(error));
  };

  async addExpense(amount, memo) {
    await this.client.connect().catch(error => logAndExit(error));
    await this.createTableIfNone().catch(error => logAndExit(error));
    let date = new Date();
    date = date.toLocaleDateString();
  
    let text = `INSERT INTO expenses (amount, memo, created_on)
    VALUES ($1, $2, $3)`;
    let values = [amount, String(memo), String(date)];
    
    await this.client.query(text, values)
                  .catch(error => logAndExit(error));
  
    await this.client.end().catch(error => logAndExit(error));
  };

  async searchExpenses(memo) {
    await this.client.connect().catch(error => logAndExit(error));
    await this.createTableIfNone().catch(error => logAndExit(error));
    let text = `SELECT * FROM expenses WHERE memo ILIKE $1`;
    let value = [`%${memo}%`];

    let res = await this.client.query(text, value).catch(error => logAndExit(error));

    this.displayCount(res.rowCount);
    this.displayExpenses(res.rows);
    this.displayTotal(res.rows);

    this.client.end().catch(error => logAndExit(error));
  };

  async deleteExpense(id) {
    await this.client.connect().catch(error => logAndExit(error));
    await this.createTableIfNone().catch(error => logAndExit(error));

    let text1 = `SELECT * FROM expenses WHERE id = $1`;
    let text2 = `DELETE FROM expenses WHERE id = $1`;
    let value = [String(id)];

    let res = await this.client.query(text1, value).catch(error => logAndExit(error));

    if (res.rowCount === 0) {
      console.log(`There is no expense with the id '${value}'.`);
    } else {
      console.log(`The following expense has been deleted:`);
      this.displayExpenses(res.rows);
      await this.client.query(text2, value).catch(error => logAndExit(error));
    }

    await this.client.end().catch(error => logAndExit(error));
  }

  async clearExpenses() {
    await this.client.connect().catch(error => logAndExit(error));
    await this.createTableIfNone().catch(error => logAndExit(error));

    let text = `DELETE FROM expenses`;

    await this.client.query(text).catch(error => logAndExit(error));

    await this.client.end().catch(error => logAndExit(error));
  }
}

class CLI {
  constructor() {
    this.data = new ExpenseData();
  }

  static HELP() {
    return help;
  }

  displayHelp() {
    console.log(CLI.HELP());
  }

  run(argArr) {
    let command = argArr[2];

    if (command === 'list') {
      this.data.listExpenses();
    } else if (command === 'add') {
      let amount = argArr[3];
      let memo = argArr[4];
      if (amount && memo) {
        this.data.addExpense(amount, memo);
      } else {
        console.log('You must provide an amount and memo.');
      }
    } else if (command === 'search') {
      let memo = argArr[3];
      if (memo) {
        this.data.searchExpenses(memo);
      } else {
        console.log('You must provide a memo.');
      }
    } else if (command === 'delete') {
      let id = argArr[3];
      if (id) {
        this.data.deleteExpense(id);
      } else {
        console.log('You must provide an id.');
      }
    } else if (command === 'clear') {
      let rl = READLINE.createInterface({
        input: process.stdin,
        output: process.stdout
      });
      let questionText = `This will remove all expenses. Are you sure? (y/n) `;
      rl.question(questionText, (answer) => {
        if (answer.toLowerCase() === 'y') {
          this.data.clearExpenses();
        }
        rl.close();
      });
    } else {
      this.displayHelp();
    }
  }
}

let cli = new CLI();

cli.run(PROCESS.argv);